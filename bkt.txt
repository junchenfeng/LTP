import numpy as np

# likelihood of observed data for single component BKT
def llk(c, A, beta, k):
	#beta = -np.log(1-lrate)
	#A = (1-guess-slip)(1-init_mastery)
	#c = (1-slip)
	crate = c-A*np.exp(-beta*k)
	return
	
def grad(c,A,beta,k):
	grad = np.zeros((3,1))
	grad[0] = 1
	grad[1] = -np.exp(-beta*k)
	grad[2] = A*np.exp(-beta*k)*k
	return grad
	
def data_llk(log_data, params):
	# log_data are tuples of (k,Y,n)
	# where k is the time of practice, Y=1 is success, n is the number of recurrence
	
	c = params[0]
	A = params[1]
	beta = params[2]

	log_ll = 0
	for log in log_data:
		k = log[0]
		Y = log[1]
		n = log[2]
		p = llk(c,A,beta,k)		
		log_ll += (Y*p + (1-Y)*(1-p))*n
		
	return -log_ll

def data_grad(log_data, params):
	c = params[0]
	A = params[1]
	beta = params[2]

	log_grad = np.zeros((3,1))
	for log in log_data:
		k = log[0]
		Y = log[1]
		n = log[2]
		g = grad(c,A,beta,k)		
		log_grad += (Y*g + (1-Y)*(-p))*n
		
	return -log_grad
